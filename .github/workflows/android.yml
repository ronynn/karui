name: Android APK Build


on:
  push:
    branches:
      - main
      - master
  pull_request:


jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    env:
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}


    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      
      
      
      # Set up JDK 17 (Temurin is an OpenJDK distribution)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      
      
      
      
      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      
      
      
      
      # Clean previous build outputs (and APK outputs)
      - name: Clean Build Directory
        run: |
          rm -rf app/build
      
      
      
      
      # Grant execute permission to Gradle wrapper
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew
      
      
      
      
      # If the commit message contains "release", set up the keystore for signing.
      - name: Setup Keystore
        if: contains(github.event.head_commit.message, 'release')
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks
      
      
      
      
      # Debug step to verify if the keystore file exists and is non-empty
      - name: Verify Keystore File
        if: contains(github.event.head_commit.message, 'release')
        run: |
          if [ -s "keystore.jks" ]; then
            echo "Keystore file exists and is non-empty."
            ls -lh keystore.jks
          else
            echo "Keystore file is missing or empty!" && exit 1
          fi
      
      
      
      
      # Verify Keystore Integrity
      - name: Verify Keystore Integrity
        if: contains(github.event.head_commit.message, 'release')
        run: |
          echo "Listing keystore contents:"
          keytool -list -keystore keystore.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" || { echo "Keystore verification failed!"; exit 1; }
      
      
      
      
      # Verify matching keystore and key passwords
      - name: Verify matching keystore and key passwords
        if: contains(github.event.head_commit.message, 'release')
        run: |
          if [ "$ANDROID_KEYSTORE_PASSWORD" = "$ANDROID_KEY_PASSWORD" ]; then
            echo "Keystore password and key password match."
          else
            echo "Error: Keystore password and key password do not match!" && exit 1
          fi
      
      
      
      
      # Build APK: if commit message contains "release", build the release APK; otherwise, build the debug APK.
      - name: Build APK
        id: build_apk
        continue-on-error: true
        run: |
          ./gradlew clean
          if [[ "${{ github.event.head_commit.message }}" == *release* ]]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi
      
      
      
      
      # Debug: List APK outputs
      - name: List APK Outputs
        run: |
          echo "APK files in app/build/outputs/apk:"
          find app/build/outputs/apk -type f -name "*.apk"
      
      
      
      
      # If the build failed, rerun with detailed logging to help diagnose the issue.
      - name: Debug Build Failure (Stacktrace, Info, Scan)
        if: failure()
        run: |
          echo "Build failed, re-running with debug options..."
          if [[ "${{ github.event.head_commit.message }}" == *release* ]]; then
            ./gradlew assembleRelease --stacktrace --info --scan
          else
            ./gradlew assembleDebug --stacktrace --info --scan
          fi
          exit 1
      
      
      
      
      # Upload the built APK as an artifact (Release)
      - name: Upload APK Artifact (Release)
        if: contains(github.event.head_commit.message, 'release')
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
      
      
      
      
      # Upload the built APK as an artifact (Debug)
      - name: Upload APK Artifact (Debug)
        if: ${{ !contains(github.event.head_commit.message, 'release') }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
